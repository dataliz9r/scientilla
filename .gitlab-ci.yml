image: docker:18

stages:
- testing
- build
- push
- prepare_staging
- start_staging

variables:
  SSH_USER: docker
  SSH_HOST: 10.255.7.84
  DOCKER_TAG: "$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA"
  SSH_PREPARE_DEPLOY: "
    curl -o /var/docker/deploy.sh https://raw.githubusercontent.com/scientilla/scientilla-docker/gitlab-ci/deploy.sh &&
    chmod +x /var/docker/deploy.sh &&
    /var/docker/deploy.sh prepare $CI_COMMIT_REF_NAME $CI_COMMIT_SHORT_SHA"
  SSH_START_DEPLOY: "
    curl -o /var/docker/deploy.sh https://raw.githubusercontent.com/scientilla/scientilla-docker/gitlab-ci/deploy.sh &&
    chmod +x /var/docker/deploy.sh &&
    /var/docker/deploy.sh start $CI_COMMIT_REF_NAME"

.before_script_sshclient: &install_open_sshclient_and_key
  before_script:
  - apk update
  - apk add openssh-client
  - eval `ssh-agent -s`
  - echo "$KEY" | tr -d '\r' | ssh-add - > /dev/null

.before_script_docker: &add_docker_login
  before_script:
  - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY

services:
- docker:dind

Test application:
  stage: testing
  variables:
    NAME: '$CI_COMMIT_REF_NAME'
    TAG: '$CI_COMMIT_SHORT_SHA'
    SAILSPORT: '8000'
    DB_PORT: '5432'
    POSTGRES_DB: 'scientillatest'
    POSTGRES_USER: 'scientilla'
    POSTGRES_PASSWORD: 'scientillapassword'
  script:
  - apk update && apk add --no-cache git py-pip py-paramiko
  - pip install docker-compose
  - git clone https://github.com/scientilla/scientilla-docker.git scientilla-docker
  - cd scientilla-docker
  - git checkout gitlab-ci
  - echo ENVIRONMENT="$ENVIRONMENT" > .env
  - echo NAME="$NAME" >> .env
  - echo TAG="$TAG" >> .env
  - echo SAILS_PORT="$SAILS_PORT" >> .env
  - echo DB_PORT="$DB_PORT" >> .env
  - echo POSTGRES_DB="$POSTGRES_DB" >> .env
  - echo POSTGRES_USER="$POSTGRES_USER" >> .env
  - echo POSTGRES_PASSWORD="$POSTGRES_PASSWORD" >> .env
  - touch docker/db/database_structure.sql
  - docker-compose -f docker-compose-testing-before.yml up -d db-test
  - docker-compose -f docker-compose-testing-before.yml logs -f db-test > docker/db-test/logs &
  - docker-compose -f docker-compose-testing-before.yml build npm
  - docker-compose -f docker-compose-testing-before.yml run --rm npm test
  after_script:
  - cd scientilla-docker
  - docker-compose -f docker-compose-testing-before.yml down

Build:
  stage: build
  dependencies:
  - Test application
  <<: *add_docker_login
  script:
  # Fetches the latest image
  - docker pull $CI_REGISTRY_IMAGE:latest || true
  # Build and tag the image
  - >
    docker build
    --pull
    --build-arg GIT_BRANCH=$CI_COMMIT_REF_NAME
    --build-arg GIT_COMMIT=$CI_COMMIT_SHORT_SHA
    --cache-from $CI_REGISTRY_IMAGE:latest
    --tag $CI_REGISTRY_IMAGE:$DOCKER_TAG
    .
  # Push the image to the registry
  - docker push $CI_REGISTRY_IMAGE:$DOCKER_TAG

# Tag only the "master" branch as "latest"
Push latest:
  variables:
    # Re-uses the project workspace, but skips all Git operations
    GIT_STRATEGY: none
  stage: push
  <<: *add_docker_login"
  only:
  # Only "master" should be tagged "latest"
  - master
  script:
  # Pull image from registry
  - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  # Tag it "latest"
  - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME $CI_REGISTRY_IMAGE:latest
  # Push image to registry.
  - docker push $CI_REGISTRY_IMAGE:latest

# Prepare the staging environment with new version of the application
Prepare application on staging:
  stage: prepare_staging
  <<: *install_open_sshclient_and_key
  script:
  - ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST $SSH_PREPARE_DEPLOY
  when: manual

# Start new version of application on staging
Start application on staging:
  stage: start_staging
  <<: *install_open_sshclient_and_key
  script:
  - ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST $SSH_START_DEPLOY
  when: manual